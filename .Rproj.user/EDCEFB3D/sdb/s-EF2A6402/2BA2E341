{
    "contents" : "# makeVector takes a numeric vector, saved in the private variable x\nmakeVector <- function(x = numeric()) \n{\n  # initialize the mean to NULL during the first call to makeVector\n  # this is needed because ig getmean() is called immediately after\n  # the makeVector funciton is constructed, without a call to setmean\n  # we know we must first calculate the mean in cachemean.  \n  m <- NULL \n  \n  # funciton to set a new value for the underlying vector\n  # this invalidates the cached mean, m\n  # we use the <<- operator to set the value of x and m because we want \n  # to modify x and m defined in the enclosing environment (created \n  # when makeVector was first called), not in the environment local to set(),\n  # in which x and m are undefined.\n  # we must reset m to NULL since we are modifying the underlying\n  # vector and the cached value is no longer the valid \n  set <- function(y) \n  {\n    x <<- y\n    m <<- NULL\n  }\n  \n  # getter function for underlying vector\n  # in R the return value of a function is the last statement.\n  # all of these functions could have been written as:\n  # return(x), etc... as the last line.\n  get <- function()\n  {\n    x\n  }\n  \n  # set the mean of the vector x.  Called by cachemean,\n  # this is pretty weird style, but then so is the whole set up.\n  # again we use the <<- operator because we want to modify the m defined\n  # in the enclosing function makeVector, not the m local to setmean,\n  # which would be undefined.\n  setmean <- function(mean) \n  {\n    m <<- mean\n  }\n  \n  # returns the mean.  Will be null if setmean has not been called or\n  # if set is called after the last call to setmean\n  getmean <- function() \n  {\n    m\n  }\n  \n  # return value of the makeVector function is a list\n  # of functions (and variables if we wish) that we want to expose\n  # as public.  these are accessed with the $ operator.  Any variables\n  # declared inside makeVector but not exported as part of this list\n  # are private...they are inaccessible to any caller of makeVector\n  list(set = set, get = get,\n       setmean = setmean,\n       getmean = getmean)\n}\n\n# cachemean takes a caching Vector created with makeVector\ncachemean <- function(x, ...) \n{\n  # get the mean of the vector defined inside x.\n  # we can use the $ operator to access the function since it was\n  # defined in the list of function pointers returned by the call to\n  # makeVector\n  m <- x$getmean()\n  \n  # if we've already computed the mean and stored it via setmean(),\n  # and have not invalidated the cache by calling set(), return the cached\n  # version of x\n  if(!is.null(m)) \n  {\n    message(\"getting cached data\")\n    # we have to explicily use return here otherwise we'd keep\n    # executing the code after the if conditional ends.  Since\n    # the cached version is good, just return it and we are done.\n    return(m)\n  }\n  \n  # either we havent computed the cached version yet, or we've called\n  # set() previously and invalidated the cache.\n  \n  # call get() to get the underlying vector\n  data <- x$get()\n  \n  # calculate the mean of the underlying vector, passing with it\n  # any varargs passed to cachemean\n  m <- mean(data, ...)\n  \n  # now set the mean in x so we cache it and dont need to needlessly\n  # recompute it\n  x$setmean(m)\n  \n  # return the caching vector\n  m\n}",
    "created" : 1424376631211.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2284125777",
    "id" : "2BA2E341",
    "lastKnownWriteTime" : 1424210540,
    "path" : "~/Coursera/R_Programming/ProgrammingAssignment2/ProgrammingAssignment2/GetMeanAndCacheMean.R",
    "project_path" : "GetMeanAndCacheMean.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}